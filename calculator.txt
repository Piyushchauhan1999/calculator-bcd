----------------------------------------------------------------------------------
-- Company:
-- Engineer:
--
-- Create Date: 05/20/2022 04:47:26 PM
-- Design Name:
-- Module Name: calc - Behavioral
-- Project Name:
-- Target Devices:
-- Tool Versions:
-- Description:
--
-- Dependencies:
--
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity calc is
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           output: in STD_LOGIC;
           BCD : in STD_LOGIC_VECTOR (3 downto 0);
      load: in STD_LOGIC_VECTOR (1 downto 0);
      operation: in STD_LOGIC_VECTOR (1 downto 0);
      answer: buffer integer);
end calc;

architecture Behavioral of calc is
signal clkCount: integer:=0;
signal operandA:integer:=0;
signal operandB:integer:=0;
signal operator:integer:=0;
constant totalCount: integer:=5;
begin
    process(clk,BCD,load,rst,operation)
    begin
if ( clk'event and clk = '1') then
            clkCount<=clkCount+1;
if( clkCount>totalCount)then
            clkCount<= 0;
if(rst = '1') then
operandA<=0;
operandB<=0;
answer <= 0;
else
case load is
when "00" => if(output = '1') then
             case operator is
           when 1 => answer <= operandA+operandB;
         when 2 => answer <= operandA-operandB;
         when 3 => answer <= operandA*operandB;
         when 4 => answer <= operandA/operandB;
         when others => if(operandA>operandB) then
                 answer <= operandA;
                       else
                   answer <= operandB;
                 end if;
     end case;
        else
         answer <= answer;
        end if;
when "01" => case BCD is
       when "0000" => operandA<=operandA*10+0;
       when "0001" => operandA<=operandA*10+1;
       when "0010" => operandA<=operandA*10+2;
       when "0011" => operandA<=operandA*10+3;
       when "0100" => operandA<=operandA*10+4;
       when "0101" => operandA<=operandA*10+5;
       when "0110" => operandA<=operandA*10+6;
       when "0111" => operandA<=operandA*10+7;
       when "1000" => operandA<=operandA*10+8;
       when "1001" => operandA<=operandA*10+9;
       when others => operandA<=operandA;
    end case;
when "10" => case BCD is
                        when "0000" => operandB<=operandB*10+0;
                        when "0001" => operandB<=operandB*10+1;
                        when "0010" => operandB<=operandB*10+2;
                        when "0011" => operandB<=operandB*10+3;
                        when "0100" => operandB<=operandB*10+4;
                        when "0101" => operandB<=operandB*10+5;
                        when "0110" => operandB<=operandB*10+6;
                        when "0111" => operandB<=operandB*10+7;
                        when "1000" => operandB<=operandB*10+8;
                        when "1001" => operandB<=operandB*10+9;
                        when others => operandB<=operandB;
                     end case;
when "11" => case operation is
                        when "00" => operator<=1;
                        when "01" => operator<=2;
                        when "10" => operator<=3;
                        when "11" => operator<=4;
                        when others => operator<=operator;
                     end case;
        when others => answer <= answer;
    end case;
end if;
end if;
end if;
end process;
end Behavioral;